// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(SecretContext))]
    partial class SecretContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Model.Entities.ApiKey", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("KeyHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<Guid>("UserUid")
                        .HasColumnType("uuid");

                    b.HasKey("Uid");

                    b.HasIndex("UserUid");

                    b.ToTable("ApiKeys");
                });

            modelBuilder.Entity("Model.Entities.Audit", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("DateAct")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserUid")
                        .HasColumnType("uuid");

                    b.HasKey("Uid");

                    b.HasIndex("UserUid");

                    b.ToTable("Audit");
                });

            modelBuilder.Entity("Model.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateDeadToken")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateExpireToken")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Uid");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Model.Entities.Role", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("character varying(600)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<Guid>("RoleTypeUid")
                        .HasColumnType("uuid");

                    b.HasKey("Uid");

                    b.HasIndex("RoleTypeUid");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Model.Entities.RoleType", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Uid");

                    b.ToTable("RoleTypes");
                });

            modelBuilder.Entity("Model.Entities.Secret", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("StorageUid")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Uid");

                    b.HasIndex("StorageUid");

                    b.ToTable("Secrets");
                });

            modelBuilder.Entity("Model.Entities.SecretLinkPolicy", b =>
                {
                    b.Property<Guid>("RoleUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecretUid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("SecretPolicyUid")
                        .HasColumnType("uuid");

                    b.HasKey("RoleUid", "SecretUid");

                    b.HasIndex("SecretPolicyUid");

                    b.HasIndex("SecretUid");

                    b.ToTable("SecretLinkPolicies");
                });

            modelBuilder.Entity("Model.Entities.SecretPolicy", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("character varying(600)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpdate")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Uid");

                    b.ToTable("SecretPolicies");
                });

            modelBuilder.Entity("Model.Entities.Storage", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("character varying(600)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCommon")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Uid");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("Model.Entities.StorageLinkPolicy", b =>
                {
                    b.Property<Guid>("RoleUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StorageUid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid>("StoragePolicyUid")
                        .HasColumnType("uuid");

                    b.HasKey("RoleUid", "StorageUid");

                    b.HasIndex("StoragePolicyUid");

                    b.HasIndex("StorageUid");

                    b.ToTable("StorageLinkPolicies");
                });

            modelBuilder.Entity("Model.Entities.StoragePolicy", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("character varying(600)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCommon")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCreate")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUpdate")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Uid");

                    b.ToTable("StoragePolicies");
                });

            modelBuilder.Entity("Model.Entities.User", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code2FA")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(183)
                        .HasColumnType("character varying(183)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActiveCode")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsApiKey")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsCreateStorage")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOAuth")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUserPass")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("RefreshTokenUid")
                        .HasColumnType("uuid");

                    b.HasKey("Uid");

                    b.HasIndex("RefreshTokenUid");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Model.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserUid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleUid")
                        .HasColumnType("uuid");

                    b.HasKey("UserUid", "RoleUid");

                    b.HasIndex("RoleUid");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Model.Entities.WhiteListIp", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApiKeyUid")
                        .HasColumnType("uuid");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.HasKey("Uid");

                    b.HasIndex("ApiKeyUid");

                    b.ToTable("WhiteListIps");
                });

            modelBuilder.Entity("Model.Entities.ApiKey", b =>
                {
                    b.HasOne("Model.Entities.User", "User")
                        .WithMany("ApiKeys")
                        .HasForeignKey("UserUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Entities.Audit", b =>
                {
                    b.HasOne("Model.Entities.User", "User")
                        .WithMany("Audits")
                        .HasForeignKey("UserUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Entities.Role", b =>
                {
                    b.HasOne("Model.Entities.RoleType", "RoleType")
                        .WithMany()
                        .HasForeignKey("RoleTypeUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleType");
                });

            modelBuilder.Entity("Model.Entities.Secret", b =>
                {
                    b.HasOne("Model.Entities.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Model.Entities.SecretLinkPolicy", b =>
                {
                    b.HasOne("Model.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.SecretPolicy", "SecretPolicy")
                        .WithMany("SecretLinkPolicies")
                        .HasForeignKey("SecretPolicyUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Secret", "Secret")
                        .WithMany("SecretLinkPolicies")
                        .HasForeignKey("SecretUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Secret");

                    b.Navigation("SecretPolicy");
                });

            modelBuilder.Entity("Model.Entities.StorageLinkPolicy", b =>
                {
                    b.HasOne("Model.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.StoragePolicy", "StoragePolicy")
                        .WithMany("StorageLinkPolicies")
                        .HasForeignKey("StoragePolicyUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.Storage", "Storage")
                        .WithMany("StorageLinkPolicies")
                        .HasForeignKey("StorageUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Storage");

                    b.Navigation("StoragePolicy");
                });

            modelBuilder.Entity("Model.Entities.User", b =>
                {
                    b.HasOne("Model.Entities.RefreshToken", "RefreshToken")
                        .WithMany("Users")
                        .HasForeignKey("RefreshTokenUid");

                    b.Navigation("RefreshToken");
                });

            modelBuilder.Entity("Model.Entities.UserRole", b =>
                {
                    b.HasOne("Model.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Model.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Model.Entities.WhiteListIp", b =>
                {
                    b.HasOne("Model.Entities.ApiKey", "ApiKey")
                        .WithMany("WhiteListIps")
                        .HasForeignKey("ApiKeyUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApiKey");
                });

            modelBuilder.Entity("Model.Entities.ApiKey", b =>
                {
                    b.Navigation("WhiteListIps");
                });

            modelBuilder.Entity("Model.Entities.RefreshToken", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Model.Entities.Secret", b =>
                {
                    b.Navigation("SecretLinkPolicies");
                });

            modelBuilder.Entity("Model.Entities.SecretPolicy", b =>
                {
                    b.Navigation("SecretLinkPolicies");
                });

            modelBuilder.Entity("Model.Entities.Storage", b =>
                {
                    b.Navigation("StorageLinkPolicies");
                });

            modelBuilder.Entity("Model.Entities.StoragePolicy", b =>
                {
                    b.Navigation("StorageLinkPolicies");
                });

            modelBuilder.Entity("Model.Entities.User", b =>
                {
                    b.Navigation("ApiKeys");

                    b.Navigation("Audits");
                });
#pragma warning restore 612, 618
        }
    }
}
